import { NextApiRequest, NextApiResponse } from 'next';
import { spawn } from 'child_process';
import * as fs from 'fs';
import * as dotenv from 'dotenv';

dotenv.config();

const recordAudio = (): Promise<void> => {
  return new Promise((resolve, reject) => {
    const process = spawn('arecord', ['-D', 'plughw:1,0', '-c1', '-r', '44100', '-f', 'S32_LE', '-t', 'wav', '-V', 'mono']);
    const writeStream = fs.createWriteStream('file.wav');
    
    process.stdout.pipe(writeStream);

    process.stderr.on('data', (data) => {
      console.error(`stderr: ${data}`);
    });

    process.on('close', (code) => {
      console.log(`child process exited with code ${code}`);
      resolve();
    });

    // Stop recording after 2 seconds
    setTimeout(() => {
      process.kill();
    }, 5000);
  });
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    await recordAudio();
    console.log('Audio recording finished.');
    const audioData = fs.readFileSync('file.wav').toString('base64');
    res.status(200).json({ audioData }); // ここではbase64でエンコードされたデータをそのまま返しています。
  } catch (error) {
    console.error('An error occurred:', error);
    res.status(500).json({ error: 'An error occurred while recording audio.' });
  }
}
